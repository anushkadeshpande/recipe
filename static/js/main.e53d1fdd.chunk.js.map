{"version":3,"sources":["Results.js","App.js","reportWebVitals.js","index.js"],"names":["Results","dishName","cal","image","time","ingredients","useState","show","setShow","btnText","setText","showIngredients","map","ingredientLine","src","alt","className","onClick","e","preventDefault","style","display","listStyle","App","search","setSearch","recipes","setRecipe","query","setQuery","api","useEffect","getData","a","fetch","response","json","data","console","log","hits","onSubmit","type","value","onChange","target","recipe","label","Math","round","calories","totalTime","ingredientLines","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAgCeA,MA7Bf,YAAgE,IAA9CC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,IAAMC,EAA6B,EAA7BA,MAAQC,EAAqB,EAArBA,KAAOC,EAAc,EAAdA,YAAc,EACpCC,oBAAS,GAD2B,mBACpDC,EADoD,KAC7CC,EAD6C,OAEjCF,mBAAS,oBAFwB,mBAEpDG,EAFoD,KAE1CC,EAF0C,KAGrDC,EAAgBN,EAAYO,KAAI,SAACC,GAC/B,OAAO,6BAAKA,OAYpB,OACI,gCACI,6BAAKZ,IACL,2CAAcC,EAAd,UACA,qBAAKY,IAAKX,EAAOY,IAAKd,IACtB,oDAAuBG,EAAvB,WACA,wBAAQY,UAAU,WAAWC,QAflB,SAACC,GAChBA,EAAEC,iBAEET,EADW,qBAAZD,EACS,mBAEA,oBACZD,GAASD,IASL,SAAqDE,IACrD,oBAAIW,MAAO,CAACC,QAASd,EAAO,QAAU,OAAQe,UAAU,QAAxD,SAAkEX,IAClE,2BCoCGY,EA3DH,WAAO,IAAD,EACYjB,mBAAS,IADrB,mBACTkB,EADS,KACDC,EADC,OAEanB,mBAAS,IAFtB,mBAEToB,EAFS,KAEAC,EAFA,OAGUrB,mBAAS,IAHnB,mBAGTsB,EAHS,KAGFC,EAHE,KAMVC,EAAG,0CAAsCF,EAAtC,mBAFM,WAEN,oBADO,oCAUhBG,qBAAU,WACRC,MACC,CAACJ,IAEJ,IAOMI,EAAO,uCAAG,8BAAAC,EAAA,sEACSC,MAAMJ,GADf,cACRK,EADQ,gBAEKA,EAASC,OAFd,OAERC,EAFQ,OAGdC,QAAQC,IAAIF,EAAKG,MACjBb,EAAUU,EAAKG,MAJD,2CAAH,qDAOb,OACE,sBAAKxB,UAAU,MAAf,UACA,oBAAIA,UAAU,eAAd,0BACA,oBAAIA,UAAU,eAAd,yCACA,oBAAIA,UAAU,eAAd,mFACE,uBAAMyB,SAnBI,SAAAvB,GACZA,EAAEC,iBACFU,EAASL,GACTC,EAAU,KAgBgBT,UAAU,aAAlC,UAEE,uBAAO0B,KAAK,OAAOC,MAAOnB,EAAQoB,SA/BnB,SAAA1B,GACnBO,EAAUP,EAAE2B,OAAOF,OACnBL,QAAQC,IAAIrB,EAAE2B,OAAOF,QA6ByC3B,UAAU,gBACpE,wBAAQ0B,KAAK,SAAS1B,UAAY,mBAAlC,uBAIAU,EAAQd,KAAI,SAACkC,GAAD,OACV,cAAC,EAAD,CACC7C,SAAU6C,EAAOA,OAAOC,MACzB7C,IAAK8C,KAAKC,MAAMH,EAAOA,OAAOI,UAC9B/C,MAAO2C,EAAOA,OAAO3C,MACrBC,KAAM0C,EAAOA,OAAOK,UACpB9C,YAAayC,EAAOA,OAAOM,iBALbN,EAAOA,OAAO3C,cCtCvBkD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e53d1fdd.chunk.js","sourcesContent":["import React ,{ useState} from \"react\";\r\nimport './App.css';\r\n\r\nfunction Results({dishName, cal , image , time , ingredients}) {\r\n    const [show , setShow]=useState(false);\r\n    const [btnText , setText]=useState('Show Ingredients');\r\n    const showIngredients=ingredients.map((ingredientLine)=>{\r\n            return <li>{ingredientLine}</li>\r\n    })\r\n\r\n    const showDecision=(e)=>{\r\n        e.preventDefault();\r\n        if(btnText === 'Show Ingredients')\r\n            setText('Hide Ingredients');\r\n        else\r\n            setText('Show Ingredients');\r\n        setShow(!show);        \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>{dishName}</h3>\r\n            <p>Calories: {cal} cal</p>\r\n            <img src={image} alt={dishName}/>\r\n            <p>Preparation Time : {time} mins</p>\r\n            <button className=\"show-btn\" onClick={showDecision}>{btnText}</button>\r\n            <ul style={{display:(show ? 'block' : 'none'),listStyle:'none'}}>{showIngredients}</ul>   \r\n            <hr />       \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Results\r\n","import React, { useState, useEffect } from \"react\";\nimport './App.css';\nimport Results from './Results';\n\nconst App = () => {\n  const [search, setSearch] = useState(\"\");\n  const [recipes, setRecipe] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const APP_ID = '2e24aa9a';\n  const APP_KEY = '231521a4596d35e9c4f7d05ff4f73427';\n  const api = `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\n\n  \n  const setInputText = e => {\n    setSearch(e.target.value);\n    console.log(e.target.value);\n  }\n\n  //to make sure that data is fetched only when we submit the query\n  useEffect(() => {\n    getData();\n  }, [query]);\n  \n  const setVal= e =>{\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  }\n\n  //to fetch the data\n  const getData = async () => {\n    const response = await fetch(api);\n    const data = await response.json();\n    console.log(data.hits);\n    setRecipe(data.hits);\n  }\n\n  return (\n    <div className=\"App\">\n    <h1 className=\"header-color\">Hungry?.....</h1>\n    <h2 className=\"header-color\">And don't know how to cook?</h2>\n    <h3 className=\"header-color\">Search for your favourite dishes here and start cooking right away...</h3>\n      <form onSubmit={setVal} className=\"form-float\">\n      \n        <input type=\"text\" value={search} onChange={setInputText} className=\"input-style\"/>\n        <button type=\"submit\" className = \"search-btn-style\">Search</button>\n      </form>\n\n      {\n        recipes.map((recipe) => \n          <Results key={recipe.recipe.image} \n           dishName={recipe.recipe.label} \n          cal={Math.round(recipe.recipe.calories)} \n          image={recipe.recipe.image} \n          time={recipe.recipe.totalTime} \n          ingredients={recipe.recipe.ingredientLines}\n          />\n        )}\n\n    </div>\n \n  );\n      }\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}